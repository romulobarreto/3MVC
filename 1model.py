'''
üìå O que √© Model no MVC?

No padr√£o MVC (Model-View-Controller), o Model √© a camada respons√°vel por lidar com os dados da aplica√ß√£o. Ele representa os objetos e regras de neg√≥cio, interage com o banco de dados (se houver um) e processa a l√≥gica principal do sistema.

üîπ Principais responsabilidades do Model:
	1.	Armazenar e manipular dados (mesmo sem um banco de dados).
	2.	Aplicar regras de neg√≥cio (valida√ß√µes, c√°lculos, etc.).
	3.	Fornecer dados para o Controller, que depois repassa para a View.
'''

# üìå Exemplo 1 - Sistema de Cadastro de Produtos (Sem Banco de Dados):
# Vamos criar um Model para gerenciar um cat√°logo de produtos sem banco de dados, usando apenas uma lista na mem√≥ria.
class Produto:
    def __init__(self, nome, preco):
        self.nome = nome
        self.preco = preco

    def __str__(self):
        return f'Produto: {self.nome} | Pre√ßo: R$ {self.preco:.2f}'


class Catalogo:
    def __init__(self):
        self.produtos = []  # Armazena os produtos em uma lista

    def adicionar_produto(self, produto):
        self.produtos.append(produto)

    def listar_produtos(self):
        return self.produtos


# Criando um cat√°logo e adicionando produtos (simulando um Model)
catalogo = Catalogo()
catalogo.adicionar_produto(Produto("Notebook", 3500))
catalogo.adicionar_produto(Produto("Mouse", 150))

# Listando os produtos
for produto in catalogo.listar_produtos():
    print(produto)
'''
üìå O que acontece aqui?
	‚Ä¢	Criamos um Model simples para armazenar produtos (Produto) e um cat√°logo (Catalogo).
	‚Ä¢	O Catalogo age como um reposit√≥rio de produtos.
	‚Ä¢	O m√©todo listar_produtos() retorna os produtos cadastrados.
'''





# üìå Exemplo 2 - Model com Valida√ß√µes:
# Vamos adicionar uma regra de neg√≥cio no Model: o pre√ßo do produto n√£o pode ser negativo.
class Produto:
    def __init__(self, nome, preco):
        if preco < 0:
            raise ValueError("O pre√ßo n√£o pode ser negativo!")
        self.nome = nome
        self.preco = preco

    def __str__(self):
        return f'Produto: {self.nome} | Pre√ßo: R$ {self.preco:.2f}'


# Testando a valida√ß√£o
try:
    p1 = Produto("Teclado", 200)
    print(p1)

    p2 = Produto("Monitor", -500)  # Vai gerar um erro
    print(p2)
except ValueError as e:
    print(f"Erro ao criar produto: {e}")
'''
üìå Destaques:
	‚Ä¢	Se algu√©m tentar cadastrar um produto com pre√ßo negativo, o Model impede isso.
	‚Ä¢	A regra de neg√≥cio fica dentro da classe, garantindo que ningu√©m crie produtos inv√°lidos.
'''